<!DOCTYPE html>
<html>

<head>
    <title>Visualize Ranks</title>
    <style>
        .container {
            width: 100%;
        }

        .container>* {
            margin: 2.5%;
        }

        .selection_panel {
            width: 25%;
            float: left;
        }

        .canvas_panel {
            margin-left: 32.5%;
            width: 65%;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="selection_panel">
            <% for (let i=0; i < trackedUsers.length; i++) { %>
                <input type=checkbox name="<%-i%>" class="users" onclick="validateCheckBox(this)">
                <label class="user_label"><%-trackedUsers[i]%></label>
                <br>
                <% } %>

                    <hr>
                    <label>ELO Bounds: </label>
                    <input type="text" id="low" name="low" placeholder="Low" autocomplete="off">
                    <label> - </label>
                    <input type="text" id="high" name="high" placeholder="High" autocomplete="off">
                    <input type="submit" id="elo_auto" value="Reset" onclick="resetELOBounds()">
                    <br>
                    <br>
                    <label>Date Bounds (GMT -4:00): </label>
                    <input type="date" id="beginning" name="beginning" placeholder="Beginning" autocomplete="off">
                    <label> - </label>
                    <input type="date" id="end" name="end" placeholder="End" autocomplete="off">
                    <input type="submit" id="date_auto" value="Reset" onclick="resetTimeBounds()">
                    <hr>

        </div>

        <div class="canvas_panel">
            <canvas id="visualize_canvas" width="1250" height="800" style="border:1px solid #000000;"></canvas>
        </div>
    </div>

    <script>
        var eloHigh = 3000;
        var eloLow = 0;
        var dateBegin = new Date(1679529600000);
        var dateEnd = new Date();
        dateEnd.setHours(23, 59, 59, 999);

        var w = document.getElementsByTagName('input');
        for (var i = 0; i < w.length; i++) {
            if (w[i].type == 'checkbox') {
                w[i].checked = false;
            }
        }

        document.getElementById("low").addEventListener("input", (e) => {
            eloLow = parseInt(e.target.value);
            drawElo();
        });
        document.getElementById("high").addEventListener("input", (e) => {
            eloHigh = parseInt(e.target.value);
            drawElo();
        });
        document.getElementById("beginning").onchange = () => {
            dateBegin = new Date(document.getElementById("beginning").value);
            drawElo();
        };
        document.getElementById("end").onchange = () => {
            dateEnd = new Date(document.getElementById("end").value);
            dateEnd.setHours(23, 59, 59, 999);
            drawElo();
        };

        drawElo();

        function validateCheckBox(btn) {
            let checkboxes = document.getElementsByClassName("users");
            let checked = 0;
            for (let i = 0; i < checkboxes.length; i++) {
                checked += checkboxes[i].checked;
            }
            if (checked > 4) {
                btn.click();
            }

            drawElo();
        }

        function resetELOBounds() {
            document.getElementById("low").value = "";
            document.getElementById("high").value = "";

            eloLow = 0;
            eloHigh = 3000;

            drawElo();
        }

        function resetTimeBounds() {
            document.getElementById("beginning").value = "";
            document.getElementById("end").value = "";

            dateBegin = new Date(1679529600000);
            dateEnd = new Date();
            dateEnd.setHours(23, 59, 59, 999);

            drawElo();
        }

        function timeConvert(unix) {
            return new Date(unix * 1000);
        }

        function drawElo() {
            let canvas = document.getElementById("visualize_canvas");
            var ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
            ctx.fillRect(50, 50, 1100, 2);
            ctx.fillRect(50, 200, 1100, 2);
            ctx.fillRect(50, 350, 1100, 2);
            ctx.fillRect(50, 500, 1100, 2);
            ctx.fillRect(1150, 50, 2, 602);

            ctx.fillStyle = "black";
            ctx.fillRect(50, 50, 2, 600);
            ctx.fillRect(50, 650, 1100, 2);
            ctx.fillText(eloHigh, 20, 55);
            ctx.fillText(Math.round((eloHigh - eloLow) * (3.0 / 4)) + eloLow, 20, 205);
            ctx.fillText(Math.round((eloHigh - eloLow) * (1.0 / 2)) + eloLow, 20, 355);
            ctx.fillText(Math.round((eloHigh - eloLow) * (1.0 / 4)) + eloLow, 20, 505);
            ctx.textAlign = "center";
            ctx.fillText((dateBegin.getMonth() + 1) + "/" + dateBegin.getDate() + "/" + dateBegin.getFullYear(), 55, 680);
            ctx.fillText((dateEnd.getMonth() + 1) + "/" + dateEnd.getDate() + "/" + dateEnd.getFullYear(), 1150, 680);
            ctx.textAlign = "left";

            ctx.fillText(eloLow, 20, 655);
            ctx.fillStyle = "black";

            let checkboxes = document.getElementsByClassName("users");
            let checked = [];
            for (let i = 0; i < checkboxes.length; i++) {
                if (checkboxes[i].checked) {
                    checked.push(checkboxes[i]);
                }
            }

            for (let i = 0; i < checked.length; i++) {
                let name = document.getElementsByClassName("user_label")[parseInt(checked[i].name)].innerHTML;
                let data = getData(name.split('#'), (data) => {
                    ctx.beginPath();
                    switch (i) {
                        case 0:
                            ctx.fillStyle = "red";
                            ctx.strokeStyle = "red";
                            ctx.arc(100, 700, 5, 0, 2 * Math.PI);
                            ctx.fillText(name, 110, 705);
                            break;
                        case 1:
                            ctx.fillStyle = "blue";
                            ctx.strokeStyle = "blue";
                            ctx.arc(700, 700, 5, 0, 2 * Math.PI);
                            ctx.fillText(name, 710, 705);
                            break;
                        case 2:
                            ctx.fillStyle = "orange";
                            ctx.strokeStyle = "orange";
                            ctx.arc(100, 750, 5, 0, 2 * Math.PI);
                            ctx.fillText(name, 110, 755);
                            break;
                        case 3:
                            ctx.fillStyle = "green";
                            ctx.strokeStyle = "green";
                            ctx.arc(700, 750, 5, 0, 2 * Math.PI);
                            ctx.fillText(name, 710, 755);
                            break;
                    }
                    ctx.fill();
                    drawEloData(ctx, data);
                });
                ctx.closePath();
                ctx.fillStyle = "black";
                ctx.strokeStyle = "black";
            }

        }
        
        function drawEloData(ctx, data) {
            for (let i = 1; i < data.length; i++) {
                let subData = data[i].split(',');
                
                let x = getX(subData[0]);
                let y = getY(subData[5]);
                
                ctx.beginPath();
                if (subData[5] >= eloLow && subData[5] <= eloHigh) {
                    if (subData[0] * 1000 >= dateBegin && subData[0] * 1000 <= dateEnd) {
                        ctx.arc(x, y, 3, 0, 2 * Math.PI);
                        ctx.closePath();
                        ctx.fill();
                    }
                }
                
                if (i != (data.length - 1)) {
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    subData = data[i + 1].split(',');
                    x = getX(subData[0]);
                    y = getY(subData[5]);
                    ctx.lineTo(x, y);
                    ctx.closePath();
                    ctx.stroke();
                }
            }
        }
        
        function getX(data) {
            return 50 + (((parseInt(data) * 1000) - dateBegin.getTime()) / (dateEnd.getTime() - dateBegin.getTime()) * (1100));
        }
        
        function getY(data) {
            return -600 * ((data - eloLow) / (eloHigh - eloLow)) + 650;
        }

        async function getData(name, callback) {
            var file = new XMLHttpRequest();
            file.open("GET", `http://158.101.103.193:3000/track/${name[0]}-${name[1]}.csv`, true);
            file.onreadystatechange = () => {
                if (file.readyState === 4) {
                    if (file.status === 200) {
                        allText = file.responseText;
                        lines = file.responseText.split("\n");
                        if (callback) callback(lines);
                    }
                }
            }
            await file.send();
        }
    </script>

</body>

</html>